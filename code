----------------------------------------------------------------------------------
--
-- Prova Finale (Progetto di Reti Logiche)
-- Prof. Fabio Salice - Anno 2020-2021
--
-- Chiara Fumelli (Codice Persona  Matricola )
-- Leonardo Ferro (Codice Persona  Matricola )
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
--------------------------------------------------- ENTITY
entity project_reti_logiche is
port (
    i_clk : in std_logic;
    i_rst : in std_logic;
    i_start : in std_logic;
    i_data : in std_logic_vector(7 downto 0);
    o_address : out std_logic_vector(15 downto 0);
    o_done : out std_logic;
    o_en : out std_logic;
    o_we : out std_logic;
    o_data : out std_logic_vector(7 downto 0)
);
end project_reti_logiche;
--------------------------------------------------- END ENTITY
    
--------------------------------------------------- ARCHITECTURE        
architecture Behavioral of project_reti_logiche is

--- ARCHITECTURE DATA ---
    
--LIST OF STATES
type state_type is (START_WAIT, GET_C, GET_R, CALC_DIM, GET_P, CHECK, 
                    CALC_DELTA, CALC_FLOOR, CALC_SHIFT, SHIFT_PREP, SHIFT, 
                    WRITE, WAIT_WRITING, SET_DONE, NEXT_IMG);
    
--STATUS SIGNAL:  
signal CURRENT_S, NEXT_S: state_type ; 

--STD_LOGIC:
signal ADDRESS_OUT, ADDRESS_NEXT: std_logic_vector(15 downto 0);
signal max_px_value, new_px_value, column_value, row_value, compare_px, to_be_shifted_px: std_logic_vector(7 downto 0) := "00000000";
signal min_px_value: std_logic_vector(7 downto 0) := "11111111";

--INTEGER:
signal delta_value: integer range 0 to 255 := 0;
signal shift_level, floor: integer range 0 to 8 := 0;
signal n_px: integer range 0 to 16384 := 0;
signal cnt, cnt_nxt: integer range 0 to 16384 := 0;

--BOOLEAN:
signal write_mode, shift_value: boolean := false;
signal got_0, got_255: boolean := false;

--- END ARCHITECTURE DATA ---


--- ARCHITECTURE BEHAVIOR ---
begin

start_p: process (i_clk)
        begin
        if (rising_edge(i_clk)) then
            if(i_rst = '1') then
                CURRENT_S <= START_WAIT;
            else 
                CURRENT_S <= NEXT_S;
            end if;
             
            case CURRENT_S is 
--------------------------------------------------- START_WAIT 
                when START_WAIT =>
                        if(i_start='1' ) then
                            o_done <= '0';
                            cnt <= 0;
                            cnt_nxt <= 0;
                            max_px_value <= "00000000";
                            min_px_value <= "11111111";
                            write_mode <= false;
                            shift_value <= false;
                            got_0 <= false;
                            got_255 <= false;
                            o_en <= '1'; 
                            o_we <= '0';
                            o_address <= "0000000000000000";
                            NEXT_S <= GET_C;
                         else 
                            NEXT_S <= START_WAIT;
                         end if;
--------------------------------------------------- GET_C 
                when GET_C =>
                     column_value <= i_data; 
                     o_address <= "0000000000000000" + 1;
                     NEXT_S <= GET_R;
 --------------------------------------------------- GET_R      
                when GET_R => 
                     row_value <= i_data;
                     ADDRESS_NEXT <= "0000000000000000" + 2;
                     NEXT_S <= CALC_DIM;         
 --------------------------------------------------- GET_P
                 when GET_P =>
                    if(n_px = 0) then
                        NEXT_S <= SET_DONE;
                    else
                      compare_px <= i_data; 
                      ADDRESS_NEXT <= "0000000000000000" +cnt_nxt +2; 
                      cnt_nxt <= cnt +1;
                      if(write_mode = false) then
                        if(got_255 and got_0) then
                            NEXT_S <= CALC_DELTA;
                         else
                            NEXT_S <= CHECK;
                         end if;
                      elsif(write_mode = true) then
                         NEXT_S <= SHIFT_PREP;
                      end if;
                      end if;    
--------------------------------------------------- CALC_DIM                      
               when CALC_DIM =>
                    n_px <= conv_integer(column_value) * conv_integer(row_value);
                    o_address <= ADDRESS_NEXT;
                    NEXT_S <= GET_P;
--------------------------------------------------- CHECK                   
                 when CHECK =>
                 o_address <= ADDRESS_NEXT;
                 cnt <= cnt_nxt;
                    if(cnt_nxt <= n_px) then
                        if(compare_px > max_px_value) then --check se pixel è max
            				max_px_value <= compare_px;
           	            end if;
            			if(compare_px < min_px_value) then --check se pixel è min
            				min_px_value <= compare_px;
            			end if;
            			
            			if(compare_px = "11111111") then
            	           got_255 <= true;
            		    elsif(compare_px <= "00000000") then
            			   got_0 <= true;
            			end if; 
            			
            			if(cnt_nxt = n_px) then
                            NEXT_S <= CALC_DELTA;
                        elsif(cnt_nxt < n_px)  then
                            NEXT_S <= GET_P;
                        end if;
                     end if;
--------------------------------------------------- CALC_DELTA
                  when CALC_DELTA =>
                    delta_value <= conv_integer(max_px_value) - conv_integer(min_px_value);
                    write_mode <= true;
                    NEXT_S <= CALC_FLOOR;
--------------------------------------------------- CALC_FLOOR
                when CALC_FLOOR =>
                    if(delta_value+1=1) then 
          				floor <= 0;
          			elsif(delta_value+1=2 or delta_value+1=3) then
          				floor <= 1;
          			elsif(delta_value+1>=4 and delta_value+1<=7) then
          				floor <= 2;
          			elsif(delta_value+1>=8 and delta_value+1<=15) then
          				floor <= 3;
          			elsif(delta_value+1>=16 and delta_value+1<=31) then
          				floor <= 4;
          			elsif(delta_value+1>=32 and delta_value+1<=63) then
          				floor <= 5;
          			elsif(delta_value+1>=64 and delta_value+1<=127) then
          				floor <= 6;
          			elsif(delta_value+1>=128 and delta_value+1<=255) then
          				floor <= 7;
          			elsif(delta_value+1=256) then
          				floor <= 8;
         			end if;
         			
         			ADDRESS_NEXT <= "0000000000000000" + 2; 
         			cnt_nxt <= 0;
            	    cnt <= 0;
                    NEXT_S <= CALC_SHIFT;
--------------------------------------------------- CALC_SHIFT
                when CALC_SHIFT =>
                    if(shift_value=false) then
                       shift_level <= 8 - floor;
                       shift_value <=true;
                    end if;
                    o_address <= ADDRESS_NEXT;
                    cnt <= cnt_nxt;
                    NEXT_S <= GET_P;
 ----------------------------------------------------SHIFT_PREP
                when SHIFT_PREP =>
                   to_be_shifted_px <= compare_px - min_px_value;
                   ADDRESS_OUT<=std_logic_vector(to_unsigned(n_px+1, 16)) + cnt_nxt;  

                   NEXT_S <= SHIFT;
--------------------------------------------------- SHIFT
                when SHIFT =>
                 if((conv_integer(to_be_shifted_px) >= 1 and shift_level=8) or
                       (conv_integer(to_be_shifted_px) >= 2 and shift_level=7) or
                       (conv_integer(to_be_shifted_px) >= 4 and shift_level=6) or
                       (conv_integer(to_be_shifted_px) >= 8 and shift_level=5) or
                       (conv_integer(to_be_shifted_px) >= 16 and shift_level=4) or
                       (conv_integer(to_be_shifted_px) >= 32 and shift_level=3) or
                       (conv_integer(to_be_shifted_px) >= 64 and shift_level=2) or
                       (conv_integer(to_be_shifted_px) >= 128 and shift_level=1) or
                       (conv_integer(to_be_shifted_px) >= 256 and shift_level=0)) then
            			 new_px_value<="11111111";
            	   else 
                        new_px_value <= std_logic_vector(shift_left(unsigned(to_be_shifted_px), shift_level)); 
                    end if;
                    
                    o_we <= '1';
            		o_address <= ADDRESS_OUT;                
                    NEXT_S <= WRITE;
                    
----------------------------------------------------- WRITE                    
                  when WRITE =>
                     o_data <= new_px_value;
                     if(cnt_nxt<n_px) then
                        NEXT_S<= WAIT_WRITING;
                     else 
                        NEXT_S <= SET_DONE;
                    end if;   
----------------------------------------------------- WAIT_WRITING                    
                    when WAIT_WRITING =>
                        o_we <= '0';
                        NEXT_S <= CALC_SHIFT;
----------------------------------------------------- SET_DONE                    
                  when SET_DONE => 
                    o_done <= '1';
                    NEXT_S <= NEXT_IMG;
----------------------------------------------------- NEXT_IMG                    
                  when NEXT_IMG =>
                    if(i_start = '0') then
                            o_done <= '0';
                            cnt <= 0;
                            cnt_nxt <= 0;
                            max_px_value <= "00000000";
                            min_px_value <= "11111111";
                            write_mode <= false;
                            shift_value <= false;
                            got_0 <= false;
                            got_255 <= false;
                            o_en <= '1'; 
                            o_we <= '0';
                            o_address <= "0000000000000000";
                            NEXT_S <= NEXT_IMG;
                    else
                        NEXT_S <= GET_C;
                    end if;
                  
                end case;
             end if;
            end process; 
      
end Behavioral;